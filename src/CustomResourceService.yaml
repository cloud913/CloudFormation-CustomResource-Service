AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Custom Resource as a Service
Resources:
  # Queue for failed messages
  # TODO: we should add a subscription to this to the response lambda and make sure that lambda can handle this payload so it can report an error
  CloudFormationCustomResourceServiceDeliveryFailureQueue:
    Type: AWS::SQS::Queue

  # CloudFormationCustomResourceServiceDeliveryFailureQueueAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - sns
  #     AlarmDescription: Alarm for CloudFormation custom resource delivery failure
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #       - Name: QueueName
  #         Value : { "Fn::GetAtt" : [ "CloudFormationCustomResourceServiceDeliveryFailureQueue", "QueueName"] }
  #     EvaluationPeriods: 2
  #     MetricName: ApproximateNumberOfMessagesVisible
  #     Namespace: AWS/SQS
  #     Period: 1
  #     Statistic: Sum
  #     Threshold: 0
  #     TreatMissingData: notBreaching

  # Permission for SNS to send dead letters to the failure queue
  CustomResourceDeliveryFailureQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !Ref CloudFormationCustomResourceServiceDeliveryFailureQueue
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CloudFormationCustomResourceServiceSnsTopic
      Queues:
        - !Ref CloudFormationCustomResourceServiceDeliveryFailureQueue

  CloudFormationCustomResourceServiceSnsTopic:
    Type: AWS::SNS::Topic

  # This policy gives the start function permission to call the state machine
  CloudFormationCustomResourceServiceStartPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub CloudFormationCustomResourceService-StartFunction-${AWS::Region}
      Description: Policy for the state machine
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'states:StartExecution'
            Effect: Allow
            Resource:
              - !Ref StateMachine

  CloudFormationCustomResourceServiceStartRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'CloudFormationCustomResourceService-StartFunction-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudFormationCustomResourceServiceStartPolicy
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # This function starts the state machine
  CloudFormationCustomResourceServiceStartFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs10.x
      Role: !GetAtt CloudFormationCustomResourceServiceStartRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachine
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

          const stepFunctions = new AWS.StepFunctions();

          exports.handler = async (event) => {

            if (event.Records) {
              for (const record of event.Records) {
                const messageJson = JSON.parse(record.Sns.Message);

                await startStateMachine(record.Sns.Message, messageJson.RequestId);
              }
            }
            else {
              console.info("Non SNS request");
              await startStateMachine(JSON.stringify(event), event.RequestId);
            }
          };

          async function startStateMachine(input, requestId) {
            const params = {
              stateMachineArn: process.env.StateMachineArn,
              input: input,
              name: `${requestId}`
            };

            try {
              await stepFunctions.startExecution(params).promise();
            }
            catch (e) {
              if (e.code && e.code === 'ExecutionAlreadyExists') {
                // we are currently eating this error, assuming that it's a duplicate call and thus the first call will suffice
                console.warn('Tried to run an execution that was already run. Ignoring. ' + requestId);
              }
              else {
                console.warn(e);
                Promise.reject(e);
              }
            }
          }

  # This permission allows SNS to invoke the lambda
  CloudFormationCustomResourceServiceStartFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CloudFormationCustomResourceServiceStartFunction.Arn
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref CloudFormationCustomResourceServiceSnsTopic

  # This subscription will trigger the start lambda when messages are published to the SNS topic
  CloudFormationCustomResourceServiceStartFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CloudFormationCustomResourceServiceStartFunction.Arn
      Protocol: lambda
      TopicArn: !Ref CloudFormationCustomResourceServiceSnsTopic
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CloudFormationCustomResourceServiceDeliveryFailureQueue.Arn

  # This policy grants the call endpoint function permission to call the lambda
  # TODO: need to make a change that drives this permission differently if this is going to run globally
  CloudFormationCustomResourceServiceCallEndpointPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub CloudFormationCustomResourceService-CallEndpoint-${AWS::Region}
      Description: Policy for the call endpoint function
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Effect: Allow
            Resource:
              - arn:aws:lambda:us-west-2:875285909177:function:test
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:iam::*:role/CustomResourceService-*'

  CloudFormationCustomResourceServiceCallEndpointRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'CloudFormationCustomResourceService-CallEndpoint-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Ref CloudFormationCustomResourceServiceCallEndpointPolicy

  # This function calls the endpoint lambda
  CloudFormationCustomResourceServiceCallEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs10.x
      Role: !GetAtt CloudFormationCustomResourceServiceCallEndpointRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

          const sts = new AWS.STS();

          exports.handler = async (event, context) => {
            const attempt = event.result ? event.result.attempt + 1 : 0;
            try {
              console.log('Received event:', JSON.stringify(event, null, 2));

              const assumeRoleResponse = await sts.assumeRole({
                RoleArn: event.ResourceProperties.RoleArn,
                RoleSessionName: event.RequestId,
                ExternalId: `${event.RequestId}${new Date().valueOf()}`,
                DurationSeconds: 3600,
              }).promise();

              const accessParams = {
                accessKeyId: assumeRoleResponse.Credentials.AccessKeyId,
                secretAccessKey: assumeRoleResponse.Credentials.SecretAccessKey,
                sessionToken: assumeRoleResponse.Credentials.SessionToken,
              };

              const lambda = new AWS.Lambda(accessParams);

              const rawEvent = {
                ...event
              };

              delete rawEvent.result;

              const params = {
                FunctionName: event.ResourceProperties.FunctionArn,
                InvocationType: "RequestResponse",
                LogType: "Tail",
                Payload: JSON.stringify(rawEvent)
              };
              const response = await lambda.invoke(params).promise();

              if (response.StatusCode === 200) {
                const responsePayload = JSON.parse(response.Payload);

                const isCompleteOrFailed = responsePayload.Status === "SUCCESS" || responsePayload.Status === "FAILED";

                if (isCompleteOrFailed) {
                  // it's done, so return the response
                  console.debug('it\'s done, so return the response');
                  return {
                    isCompleteOrFailed: true,
                    response: responsePayload
                  };
                }
                else {
                  if (attempt >= 29) {
                    // it's not done, but we aren't going to wait any longer
                    return {
                      isCompleteOrFailed: true,
                      response: {
                        Status: "FAILED",
                        Reason: "Timeout processing resource. Max attempts exceeded."
                      }
                    }
                  }
                  else {
                    // it's not done, it will be attempted again
                    console.debug('it\'s not done, it will be attempted again');
                    return {
                      isCompleteOrFailed: false,
                      attempt: attempt
                    }
                  }
                }
              }
              else if (response.StatusCode >= 500) {
                // throwing here so that the logic of marking it as failed is in one place
                throw new Error(`Error calling remote function. Status code was ${response.StatusCode}.`);
              }
              else {
                // other errors are not retry-able, so we are done
                return {
                  isCompleteOrFailed: true,
                  response: {
                    Status: 'FAILED',
                    Reason: 'Bad request'
                  }
                };
              }
            }
            catch (e) {
              console.warn(e.message);
              if (attempt >= 29) {
                return {
                  isCompleteOrFailed: true,
                  error: e,
                  response: {
                    Status: "FAILED",
                    Reason: `Max attempts exceeded. ${e.message}`
                  }
                }
              }
              else {
                return {
                  isCompleteOrFailed: false,
                  attempt: attempt,
                  error: e
                }
              }
            }
          };

  CloudFormationCustomResourceServiceResponseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'CloudFormationCustomResourceService-Response-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # This function reports the response back to CloudFormation by putting a response file in S# using the signed URL
  CloudFormationCustomResourceServiceResponseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs10.x
      Role: !GetAtt CloudFormationCustomResourceServiceResponseRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |-
          exports.handler = (event, context) => {
            console.log('Received event:', JSON.stringify(event, null, 2));

            if (event.result && event.result.response) {
              console.log("Create a response and send it to the presigned URL.");
              sendResponse(event.result.response, event);
            }
            else {
              console.log("An error occurred, so created an error response and send it to the presigned URL.");
              sendResponse({ status: "FAILED", reason: "An error occurred during processing. See logs for details." }, event);
            }

            function sendResponse(response, event) {
              var responseBody = JSON.stringify({
                Status: response.Status,
                Reason: response.Reason,
                PhysicalResourceId: response.PhysicalResourceId || context.logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                NoEcho: response.NoEcho || false,
                Data: response.Data
              });

              console.log("Response body:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: "PUT",
                headers: {
                  "content-type": "",
                  "content-length": responseBody.length
                }
              };

              var request = https.request(options, function (response) {
                console.log("Status code: " + response.statusCode);
                console.log("Status message: " + response.statusMessage);
                context.done();
              });

              request.on("error", function (error) {
                console.log("send(..) failed executing https.request(..): " + error);
                context.done();
              });

              request.write(responseBody);
              request.end();
            }
          };

  # Role for the state machine.
  CloudFormationCustomResourceServiceStateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudFormationCustomResourceServiceStateMachinePolicy
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # This policy gives the state machine permission to call the lambda functions and the failure SNS topic
  CloudFormationCustomResourceServiceStateMachinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for the state machine
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Effect: Allow
            Resource:
              - !GetAtt CloudFormationCustomResourceServiceCallEndpointFunction.Arn
              - !GetAtt CloudFormationCustomResourceServiceResponseFunction.Arn
          - Action:
              - sns:Publish
            Effect: Allow
            Resource:
              - !Ref CloudFormationCustomResourceServiceResponseFailedSnsTopic

  # this topic is used for notifications on failures when setting the response. these failures are
  # critical because someone's CloudFormation will not complete until the response is written.
  CloudFormationCustomResourceServiceResponseFailedSnsTopic:
    Type: AWS::SNS::Topic

  # this state machine calls a lambda to perform the custom resource action, passing in all the
  # information supplied by the custom resource. the lambda will call the endpoint repeatedly (with
  # a 15 second delay) until the endpoint returns a success/failure of the custom resource or the
  # process times out. at that point it will call another lambda to return a response to the
  # presigned URL supplied by the custom resource call. if that call fails a message will be sent
  # to the SNS topic to notify of a failure to respond.
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: CloudFormationCustomResourceService-StateMachine
      RoleArn: !GetAtt CloudFormationCustomResourceServiceStateMachineRole.Arn
      DefinitionString: !Sub |-
        {
            "Comment": "A Catch example of the Amazon States Language using an AWS Lambda Function",
            "StartAt": "CallEndpoint",
            "States": {
                "CallEndpoint": {
                    "Type": "Task",
                    "Resource": "${CloudFormationCustomResourceServiceCallEndpointFunction.Arn}",
                    "ResultPath": "$.result",
                    "Retry": [
                        {
                            "ErrorEquals": [
                                "RetryError"
                            ],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 5,
                            "BackoffRate": 2.0
                        }
                    ],
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.error",
                            "Next": "Response"
                        }
                    ],
                    "Next": "CompleteCheck"
                },
                "CompleteCheck": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.result.isCompleteOrFailed",
                            "BooleanEquals": true,
                            "Next": "Response"
                        }
                    ],
                    "Default": "DelayAndRetry"
                },
                "DelayAndRetry": {
                    "Type": "Wait",
                    "Seconds": 15,
                    "Next": "CallEndpoint"
                },
                "Response": {
                    "Type": "Task",
                    "Resource": "${CloudFormationCustomResourceServiceResponseFunction.Arn}",
                    "Retry": [
                        {
                            "ErrorEquals": [
                                "RetryError"
                            ],
                            "IntervalSeconds": 5,
                            "MaxAttempts": 10,
                            "BackoffRate": 2.0
                        }
                    ],
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.error",
                            "Next": "PublishErrorSns"
                        }
                    ],
                    "End": true
                },
                "PublishErrorSns": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::sns:publish",
                    "Parameters": {
                        "TopicArn": "${CloudFormationCustomResourceServiceResponseFailedSnsTopic}",
                        "Message.$": "$"
                    },
                    "Next": "NotifyFailure"
                },
                "NotifyFailure": {
                    "Type": "Fail",
                    "Cause": "Unable to respond to CloudFormation",
                    "Error": "ErrorA"
                }
            }
        }
